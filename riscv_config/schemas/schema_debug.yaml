hart_schema:
  type : dict
  schema:
    ###
    #ISA
    #---
    #
    # **Description**: Takes input a string representing the ISA supported by the implementation. All extension names
    # (other than Zext) should be mentioned in upper-case. Z extensions should begin with an upper-case
    # 'Z' followed by lower-case extension name (without Camel casing)
    #
    # **Examples**:
    #
    # .. code-block:: yaml
    #
    #   ISA: RV32IMA
    #   ISA: RV64IMAFDCZifencei
    #
    # **Constraints**:
    #
    #   - Certain extensions are only valid in certain user-spec version. For, eg. Zifencei is available only in user-spec 2.3 and above.
    #   - The ISA string must be specified in the manner as specified in the specifications(like subsequent Z extensions must be separated with an '_')

    ISA: { type: string, required: true, 
           regex: "^RV(32|64|128)[IE]+[ACDEFGHIJLMNPQSTUVX]*(Zicsr|Zifencei|Zihintpause|Zam|Ztso|){,1}(_Zicsr){,1}(_Zifencei){,1}(_Zihintpause){,1}(_Zam){,1}(_Ztso){,1}$" }
    ###
    #supported_xlen
    #--------------
    #
    # **Description**: list of supported xlen on the target
    #
    # **Examples**:
    #
    # .. code-block:: yaml
    #
    #   supported_xlen : [32]
    #   supported_xlen : [64, 32]
    #   supported_xlen : [64]
    #
    # **Constraints**:
    #
    #   - None

    supported_xlen:
      type: list
      schema: { type: integer, allowed: [ 32, 64, 128] }
      required: true
    ###
    #Debug_Spec_Version
    #-----------------
    #
    # **Description**: Version number of Debug specification as string. Please enclose the version in "" to avoid type mismatches.
    #
    # **Examples**:
    #
    # .. code-block:: yaml
    #
    #   Debug_Spec_Version: "1.0.0"
    #   Debug_Spec_Version: "0.13.2"
    #
    # **Constraints**:
    #
    #   - should be a valid version later than 1.0.0

    Debug_Spec_Version: {type: string,  default: '1.0.0', required: true, allowed: ["1.0.0", "0.13.2"]}
    
    ###
    #debug_mode
    #  **Description**: Boolean value indicating if the debug instructions are accessible.
    #
    #  **Examples**:
    #
    #  .. code-block:: yaml
    #
    #    debug_mode: False

    debug_mode:
      type: boolean
      required: True
      default: False   
      
    schema_node:
      type: dict
      allow_unknown: false
      noneof:
      - schema:
          warl: &ref_warl
            type: dict
            schema:
              dependency_fields:
                type: list
                empty: true
                schema:
                  type: string
                  nullable: true
              legal:
                type: list
                schema:
                  type: string
              wr_illegal:
                type: list
                schema:
                  type: string
      - 
        schema:
          wlrl: &ref_wlrl
            type: list
            schema:
              type: string
              regex: (^0x[012456789abcdef]+:0x[0123456789abcdef]+$)|(^[0-9]+:[0-9]+$)|(^[0-9]+$)|(^0x[012456789abcdef]+$)
    dcsr:
      type: dict
      schema:
        description:
          type: string
          default: The mstatus register keeps track of and controls the hart’s current
            operating state.
        address: {type: integer, default: 0x7b0, allowed: [0x7b0]}
        priv_mode: {type: string, default: D, allowed: [D]}
        reset-val:
          type: integer
          check_with: max_length
          default: 0
        rv32:
          type: dict
          schema:
            fields: {type: list, default: []}
            prv:
              type: dict
              schema:
                description: {type: string,  default: Contains the privilege level the hart was operating in when Debug Mode was entered.}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            step:
              type: dict
              schema:
                description: { type: string, default: When set and not in Debug Mode the hart will only execute a single instruction then enter Debug Mode.}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 2, allowed: [2]}
                lsb: {type: integer, default: 2, allowed: [2]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { warl: *ref_warl }
                    - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                    - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            nmip:
              type: dict
              schema:
                description:
                  type: string
                  default: When set there is a Non-Maskable-Interrupt (NMI) pending for the hart.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            mprven:
              type: dict
              schema:
                description:
                  type: string
                  default: mprv of mstatus
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            v:
              type: dict
              schema:
                description:
                  type: string
                  default: Extends the prv field with the virtualization mode WARL 0 the hart was operating in when Debug Mode was entered 
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            cause:
              type: dict
              schema:
                description:
                  type: string
                  default: Explains why Debug Mode was entered
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 6, allowed: [6]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            stoptime:
              type: dict
              schema:
                description:
                  type: string
                  default: Don’t increment any hart-local timers while in Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            stopcount:
              type: dict
              schema:
                description:
                  type: string
                  default: Don’t increment any hart-local counters while in Debug Mode
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 10, allowed: [10]}
                lsb: {type: integer, default: 10, allowed: [10]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            stepie:
              type: dict
              schema:
                description:
                  type: string
                  default: Interrupts (including NMI) are enabled during single stepping.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type: 
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                  - schema: { warl: *ref_warl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            ebreaku:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in U-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 12, allowed: [12]}
                lsb: {type: integer, default: 12, allowed: [12]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                    - schema: { warl: *ref_warl }
                    - schema: {ro_variable: {type: boolean}}
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: u_check
            ebreaks:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in S-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 13, allowed: [13]}
                lsb: {type: integer, default: 13, allowed: [13]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                    - schema: { warl: *ref_warl }
                    - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            ebreakm:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in M-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 15, allowed: [15]}
                lsb: {type: integer, default: 15, allowed: [15]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                    - schema: { warl: *ref_warl }
                    - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            ebreakvu:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in VU-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 16, allowed: [16]}
                lsb: {type: integer, default: 16, allowed: [16]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { wlrl: *ref_wlrl }
                    - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                    - schema: { warl: *ref_warl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            ebreakvs:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in VS-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 17, allowed: [17]}
                lsb: {type: integer, default: 17, allowed: [17]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { wlrl: *ref_wlrl }
                    - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                    - schema: { warl: *ref_warl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            debugver:
              type: dict
              schema:
                description:
                  type: string
                  default: Debug support exists as it is described in this document.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 28, allowed: [28]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { wlrl: *ref_wlrl }
                    - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                    - schema: { warl: *ref_warl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            accessible:
              type: boolean
              default: false
              check_with: rv32_check
        rv64:
          type: dict
          schema:
            fields: {type: list, default: []}
            prv:
              type: dict
              schema:
                description: {type: string,  default: Contains the privilege level the hart was operating in when Debug Mode was entered.}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 1, allowed: [1]}
                lsb: {type: integer, default: 0, allowed: [0]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { wlrl: *ref_wlrl }
                    - schema: { warl: *ref_warl }
                    - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  default: {ro_constant: 0}
              default: {implemented: false}
            step:
              type: dict
              schema:
                description: { type: string, default: When set and not in Debug Mode the hart will only execute a single instruction;then enter Debug Mode}
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 2, allowed: [2]}
                lsb: {type: integer, default: 2, allowed: [2]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                    - schema: { wlrl: *ref_wlrl }
                    - schema: { warl: *ref_warl }
                    - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  default: {ro_constant: 0}
              default: {implemented: false}
            nmip:
              type: dict
              schema:
                description:
                  type: string
                  default: When set, there is a Non-Maskable-Interrupt (NMI) pending for the hart.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 3, allowed: [3]}
                lsb: {type: integer, default: 3, allowed: [3]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            mprven:
              type: dict
              schema:
                description:
                  type: string
                  default: mprv in mstatus.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 4, allowed: [4]}
                lsb: {type: integer, default: 4, allowed: [4]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  default: {ro_constant: 0}
              default: {implemented: false}
            v:
              type: dict
              schema:
                description:
                  type: string
                  default: Extends the prv field with the virtualization mode WARL 0 the hart was operating in when Debug Mode was entered 
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 5, allowed: [5]}
                lsb: {type: integer, default: 5, allowed: [5]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            cause:
              type: dict
              schema:
                description:
                  type: string
                  default: Explains why Debug Mode was entered
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 8, allowed: [8]}
                lsb: {type: integer, default: 6, allowed: [6]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 0 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            stoptime:
              type: dict
              schema:
                description:
                  type: string
                  default: Don’t increment any hart-local timers while in Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 9, allowed: [9]}
                lsb: {type: integer, default: 9, allowed: [9]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { wlrl: *ref_wlrl }
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  default: {ro_constant: 0}
              default: {implemented: false}
            stopcount:
              type: dict
              schema:
                description:
                  type: string
                  default: Don’t increment any hart-local counters while in Debug Mode
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 10, allowed: [10]}
                lsb: {type: integer, default: 10, allowed: [10]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: { warl: *ref_warl }
                  - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: true}
            stepie:
              type: dict
              schema:
                description:
                  type: string
                  default: Interrupts (including NMI) are enabled during single stepping.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 11, allowed: [11]}
                lsb: {type: integer, default: 11, allowed: [11]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            ebreaku:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in U-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 12, allowed: [12]}
                lsb: {type: integer, default: 12, allowed: [12]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 3 , min : 0}}
                  - schema: {ro_variable: {type: boolean}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: u_check
            ebreaks:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in S-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 13, allowed: [13]}
                lsb: {type: integer, default: 13, allowed: [13]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 1}
              default: {implemented: false}
              check_with: s_check
            ebreakm:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in M-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 15, allowed: [15]}
                lsb: {type: integer, default: 15, allowed: [15]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            ebreakvu:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in VU-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 16, allowed: [16]}
                lsb: {type: integer, default: 16, allowed: [16]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            ebreakvs:
              type: dict
              schema:
                description:
                  type: string
                  default: ebreak instructions in VS-mode enter Debug Mode.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 17, allowed: [17]}
                lsb: {type: integer, default: 17, allowed: [17]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
              check_with: s_check
            debugver:
              type: dict
              schema:
                description:
                  type: string
                  default: Debug support exists as it is described in this document.
                shadow: {type: string, default: , nullable: True}
                msb: {type: integer, default: 31, allowed: [31]}
                lsb: {type: integer, default: 28, allowed: [28]}
                implemented: {type: boolean, default: true}
                type:
                  type: dict
                  check_with: wr_illegal
                  oneof:
                  - schema: {ro_constant: {type: integer, max: 1 , min : 0}}
                  - schema: { warl: *ref_warl }
                  - schema: { wlrl: *ref_wlrl }
                  default: {ro_constant: 0}
              default: {implemented: false}
            accessible:
              type: boolean
              default: false
              check_with: rv64_check
          default: {accessible: true}
